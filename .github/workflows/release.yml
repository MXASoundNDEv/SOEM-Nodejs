name: Release & Publish to NPM

on:
  push:
    tags:
      - "v*"
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: "Version to publish (e.g., 1.0.0)"
        required: true
        type: string

env:
  NODE_VERSION: "22"

jobs:
  # Job 1: Tests et validation avant publication
  test-before-publish:
    name: Tests & Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Verify submodules
        run: |
          echo "Checking submodule status..."
          git submodule status
          echo "Listing external directory..."
          ls -la external/
          if [ ! -f "external/soem/CMakeLists.txt" ]; then
            echo "SOEM submodule not properly initialized, initializing manually..."
            git submodule update --init --recursive --force
            ls -la external/soem/
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: TypeScript compilation check
        run: npx tsc --noEmit

      - name: Lint check
        run: npm run lint:check

      - name: Security audit
        run: npm audit --audit-level=high

      - name: Run tests with coverage
        run: npm run test:ci

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Job 2: Build multi-plateforme
  build-binaries:
    name: Build on ${{ matrix.os }}
    needs: test-before-publish
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: win32
          - os: macos-latest
            platform: darwin
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Verify submodules
        shell: bash
        run: |
          echo "Checking submodule status..."
          git submodule status
          echo "Listing external directory..."
          ls -la external/ || mkdir -p external

          if [ ! -f "external/soem/CMakeLists.txt" ]; then
            echo "SOEM submodule not properly initialized, trying multiple methods..."
            
            # Method 1: Force submodule update with fresh start
            git submodule deinit -f external/soem || true
            rm -rf external/soem
            git submodule update --init --recursive --force || echo "Method 1 failed"
            
            # Method 2: If still not found, clone with proper depth and checkout
            if [ ! -f "external/soem/CMakeLists.txt" ]; then
              echo "Direct clone fallback with proper checkout..."
              rm -rf external/soem
              git clone --depth=1 --branch=master https://github.com/OpenEtherCATsociety/SOEM.git external/soem
              
              # Verify critical files exist
              if [ ! -f "external/soem/cmake/Darwin.cmake" ]; then
                echo "Missing Darwin.cmake, trying full clone..."
                rm -rf external/soem
                git clone https://github.com/OpenEtherCATsociety/SOEM.git external/soem
              fi
            fi
            
            # Verify final state
            if [ ! -f "external/soem/CMakeLists.txt" ]; then
              echo "ERROR: Could not initialize SOEM submodule properly"
              echo "Missing files check:"
              ls -la external/soem/ || echo "Directory doesn't exist"
              exit 1
            fi
            
            echo "SOEM successfully initialized:"
            ls -la external/soem/
            echo "SOEM cmake directory:"
            ls -la external/soem/cmake/
          else
            echo "SOEM submodule already properly initialized"
          fi

          # Create Darwin.cmake if missing (macOS support)
          if [ ! -f "external/soem/cmake/Darwin.cmake" ]; then
            echo "Creating missing Darwin.cmake for macOS support..."
            cp external/soem/cmake/Linux.cmake external/soem/cmake/Darwin.cmake
            # Remove rt library dependency for macOS
            sed -i 's/target_link_libraries(soem PUBLIC pthread rt)/target_link_libraries(soem PUBLIC pthread)/' external/soem/cmake/Darwin.cmake
            echo "Darwin.cmake created successfully"
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      # Dépendances système pour Linux
      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libpcap-dev cmake build-essential

      # Dépendances système pour macOS
      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Handle potential cmake conflicts
          if brew list cmake >/dev/null 2>&1; then
            echo "CMake already installed, skipping..."
          else
            brew install cmake
          fi
          brew install libpcap

      - name: Install dependencies
        run: npm ci

      - name: Build native addon
        run: npm run build

      - name: Test binary
        run: node -e "console.log('Testing binary:'); const { SoemMaster } = require('./dist'); console.log('Interfaces:', SoemMaster.listInterfaces().length);"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.platform }}
          path: |
            build/Release/soem_addon.node
            dist/
          retention-days: 1

  # Job 3: Publication NPM
  publish-npm:
    name: Publish to NPM
    needs: [test-before-publish, build-binaries]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Verify submodules
        shell: bash
        run: |
          echo "Checking submodule status..."
          git submodule status
          echo "Listing external directory..."
          ls -la external/
          if [ ! -f "external/soem/CMakeLists.txt" ]; then
            echo "SOEM submodule not properly initialized, initializing manually..."
            git submodule update --init --recursive --force
            ls -la external/soem/
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: "https://registry.npmjs.org"
          cache: "npm"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpcap-dev cmake build-essential

      - name: Install dependencies
        run: npm ci

      # Déterminer la version à publier
      - name: Get version from tag
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Publishing version: $VERSION"

      # Mettre à jour la version dans package.json
      - name: Update package.json version
        run: |
          npm version ${{ steps.get_version.outputs.VERSION }} --no-git-tag-version
          echo "Updated package.json to version ${{ steps.get_version.outputs.VERSION }}"

      - name: Build for publication
        run: npm run build

      - name: Run final tests
        run: npm test

      # Publication NPM
      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Créer une release GitHub si pas déjà fait
      - name: Create GitHub Release
        if: github.event_name != 'release'
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          gh release create "v${VERSION}" \
            --title "Release v${VERSION}" \
            --notes "## 🚀 Release v${VERSION}

          ### 📦 NPM Package
          \`\`\`bash
          npm install soem-node@${VERSION}
          \`\`\`

          ### 🔗 Links
          - [NPM Package](https://www.npmjs.com/package/soem-node/v/${VERSION})
          - [GitHub Repository](https://github.com/MXASoundNDEv/SOEM-Nodejs)
          - [Documentation](https://github.com/MXASoundNDEv/SOEM-Nodejs#readme)

          ### 📋 Changes
          See [CHANGELOG.md](https://github.com/MXASoundNDEv/SOEM-Nodejs/blob/main/CHANGELOG.md) for detailed changes."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 4: Notification de succès
  notify-success:
    name: Notify Success
    needs: [publish-npm]
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Success notification
        run: |
          echo "🎉 Publication réussie !"
          echo "📦 Package publié sur NPM"
          echo "🏷️  Version: ${{ needs.publish-npm.outputs.version }}"
          echo "🔗 NPM: https://www.npmjs.com/package/soem-node"
