name: CI/CD - Build, Test & Release

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "22"

jobs:
  # Job 1: Tests unitaires et qualité du code
  test:
    name: Test & Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Verify submodules
        run: |
          echo "Checking submodule status..."
          git submodule status
          echo "Listing external directory..."
          ls -la external/
          if [ ! -f "external/soem/CMakeLists.txt" ]; then
            echo "SOEM submodule not properly initialized, initializing manually..."
            git submodule update --init --recursive --force
            ls -la external/soem/
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint:check

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Compile TypeScript
        run: npx tsc --noEmit

      - name: Run tests with coverage
        run: npm run test:ci

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          directory: ./coverage
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  # Job 2: Build sur différentes plateformes
  build-and-test:
    name: Build & Integration Test
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        node-version: [18, 20, 22]
        exclude:
          # Réduire la matrice pour économiser les ressources
          - os: windows-latest
            node-version: 18

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Verify submodules
        shell: bash
        run: |
          echo "Checking submodule status..."
          git submodule status
          echo "Listing external directory..."
          ls -la external/ || mkdir -p external

          if [ ! -f "external/soem/CMakeLists.txt" ]; then
            echo "SOEM submodule not properly initialized, trying multiple methods..."
            
            # Method 1: Force submodule update with fresh start
            git submodule deinit -f external/soem || true
            rm -rf external/soem
            git submodule update --init --recursive --force || echo "Method 1 failed"
            
            # Method 2: If still not found, clone with proper depth and checkout
            if [ ! -f "external/soem/CMakeLists.txt" ]; then
              echo "Direct clone fallback with proper checkout..."
              rm -rf external/soem
              git clone --depth=1 --branch=master https://github.com/OpenEtherCATsociety/SOEM.git external/soem
              
              # Verify critical files exist
              if [ ! -f "external/soem/cmake/Darwin.cmake" ]; then
                echo "Missing Darwin.cmake, trying full clone..."
                rm -rf external/soem
                git clone https://github.com/OpenEtherCATsociety/SOEM.git external/soem
              fi
            fi
            
            # Verify final state
            if [ ! -f "external/soem/CMakeLists.txt" ]; then
              echo "ERROR: Could not initialize SOEM submodule properly"
              echo "Missing files check:"
              ls -la external/soem/ || echo "Directory doesn't exist"
              exit 1
            fi
            
            echo "SOEM successfully initialized:"
            ls -la external/soem/
            echo "SOEM cmake directory:"
            ls -la external/soem/cmake/
          else
            echo "SOEM submodule already properly initialized"
          fi

          # Create Linux.cmake backup if missing (Linux support)
          if [ ! -f "external/soem/cmake/Linux.cmake" ]; then
            echo "Missing Linux.cmake, checking for alternatives..."
            ls -la external/soem/cmake/
          fi

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libpcap-dev pkg-config python3 python3-pip ninja-build

      - name: Install Node.js dependencies
        run: npm ci

      - name: Build native addon
        run: npx cmake-js rebuild --loglevel=info

      - name: Build for Electron
        run: |
          echo "Rebuilding native addon for Electron targets..."
          npm run rebuild:electron
          echo "Electron rebuild finished"

      - name: Compile TypeScript
        run: npx tsc

      - name: Verify build output
        shell: bash
        run: |
          echo "Checking build output..."
          if [ "$RUNNER_OS" == "Windows" ]; then
            ls -la build/Release/
            file build/Release/soem_addon.node || true
          else
            ls -la build/Release/
            file build/Release/soem_addon.node || true
          fi

          echo "Checking TypeScript compilation..."
          ls -la dist/ || echo "No dist directory found"
          ls -la dist/index.js || echo "No compiled index.js found"

      - name: Run integration tests (stub)
        env:
          RUN_INTEGRATION_STUB: "true"
        run: |
          echo "Running integration tests in stub mode (no hardware)"
          npx jest test/integration/soem.integration.test.ts --runInBand --silent

      - name: Upload build artifacts
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == 22
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.os }}
          path: |
            build/Release/soem_addon.node
            dist/
            types/
          retention-days: 7
